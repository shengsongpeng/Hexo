{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/alpha-dust/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","path":"img/bg-pattern.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/alpha-dust/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1510800380000},{"_id":"themes/alpha-dust/LICENSE","hash":"20fb6ab02264ce4860e25cd70b50fa86c08f1cf8","modified":1510800380000},{"_id":"themes/alpha-dust/_config.yml","hash":"e0b0c9a63fa52416c37f0a519f7126bbec7eae4b","modified":1510800380000},{"_id":"themes/alpha-dust/README.md","hash":"82326b64f6b6c12dc8d3119096a003b0f51be547","modified":1510800380000},{"_id":"themes/alpha-dust/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1510800380000},{"_id":"themes/alpha-dust/.git/config","hash":"d4dd417701b9cddba99958c69486c3d0f1faa162","modified":1510800380000},{"_id":"themes/alpha-dust/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1510800371000},{"_id":"themes/alpha-dust/.git/index","hash":"cb77440f8c1050eacb64704ad3f9e8e6ec40a995","modified":1510800380000},{"_id":"themes/alpha-dust/.git/packed-refs","hash":"7e87e30a08be17d07c3301ff13eb10bab0d3246a","modified":1510800380000},{"_id":"themes/alpha-dust/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1510800380000},{"_id":"themes/alpha-dust/languages/default.yml","hash":"bc4b0f68c3579f8d9c217b96ae9d2da1991c92f7","modified":1510800380000},{"_id":"themes/alpha-dust/languages/en.yml","hash":"9debce519356b44354cf1a613f8916321e572d7f","modified":1510800380000},{"_id":"themes/alpha-dust/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1510800380000},{"_id":"themes/alpha-dust/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1510800380000},{"_id":"themes/alpha-dust/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1510800380000},{"_id":"themes/alpha-dust/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1510800380000},{"_id":"themes/alpha-dust/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1510800380000},{"_id":"themes/alpha-dust/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1510800380000},{"_id":"themes/alpha-dust/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1510800380000},{"_id":"themes/alpha-dust/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1510800380000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1510755777000},{"_id":"source/_posts/仅仅一个UIImageView就可以实现无限轮播图效果.md","hash":"2f6d1b8fcdc4249429809fa455e6868dc98eb307","modified":1510758313000},{"_id":"source/_posts/苹果手机铃声设置（非越狱、无需下载软件2017最新版本）.md","hash":"bb831c74f2183fd87fd3815fad100f962ab0e992","modified":1510757658000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1510758408000},{"_id":"source/_posts/CocoaPods最新镜像安装方式和常用相关命令（卸载，降级）.md","hash":"e2b6eb2e87196bdbbe06d3d3bb6b693a922cf950","modified":1510758366000},{"_id":"source/_posts/根据图片获取拍摄地点和拍摄时间.md","hash":"ba04e7e5dcfc2a236781e1ee088ee913a490547d","modified":1510758165000},{"_id":"themes/alpha-dust/layout/archive.ejs","hash":"535ea1205c3dd8782aa8dec64c5bb67a5e118be9","modified":1510800380000},{"_id":"themes/alpha-dust/layout/index.ejs","hash":"a3f94e4a627a83735b82d93694980e988a32d65e","modified":1510800380000},{"_id":"themes/alpha-dust/layout/layout.ejs","hash":"2655449a77b370284e6af41aa72c7d72660008fa","modified":1510800380000},{"_id":"themes/alpha-dust/layout/page.ejs","hash":"89254cee2ffa7fde1056d09b580a18dde9686a58","modified":1510800380000},{"_id":"themes/alpha-dust/layout/post.ejs","hash":"5c6c8d3c249c64c4879276d12159a50d5b65b775","modified":1510800380000},{"_id":"themes/alpha-dust/template/archive.html","hash":"239ef36831f10f892ecdbf4438994d62cc973caa","modified":1510800380000},{"_id":"themes/alpha-dust/template/index.html","hash":"8f5f763e912a2f84306e3857b476c5cd1c048cb0","modified":1510800380000},{"_id":"themes/alpha-dust/template/post.html","hash":"8c586749ca621e6b24c07d792cb28c7827a0ed21","modified":1510800380000},{"_id":"themes/alpha-dust/.git/logs/HEAD","hash":"e49feb6170ef3f431deadbbc88acc60b7dc909c3","modified":1510800380000},{"_id":"themes/alpha-dust/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1510800371000},{"_id":"themes/alpha-dust/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1510800371000},{"_id":"themes/alpha-dust/source/css/style.styl","hash":"47e8e5969922a74d0df6f3e8686b538a22db04ae","modified":1510800380000},{"_id":"themes/alpha-dust/source/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1510800380000},{"_id":"themes/alpha-dust/source/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/after-footer.ejs","hash":"15d1d1376aabe398cce7d18ff4af41635970dd29","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/article-archive.ejs","hash":"460768ed91c4bf71199f01685d7af385354ffd28","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/article-long.ejs","hash":"f2b2d0165cb35e30c9764c324e530f487e7de59e","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/article-short.ejs","hash":"792602a61177c8059ef27efd695532f456c8ca84","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/comments.ejs","hash":"423529d88d45e0a928f6cfadcf9aef27ccb63c13","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/footer_recent_posts.ejs","hash":"569addbbc7d548fca4986e09631489f8515280ff","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/footer_categories.ejs","hash":"1831ae75b1deb1729e858b2cd83e32fff3a33f6f","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/gallery.ejs","hash":"80c3758b90fe6c197b52602456e2c4dcf7167847","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/footer.ejs","hash":"1723a9bebcafc39007f58f2fbce597a2836f8276","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/head.ejs","hash":"668eca04a5e2ff2dbd2d99135b2a5428686e73d8","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/menu.ejs","hash":"452e31aa3016cdf9febfe5c2597a335417873f08","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/header.ejs","hash":"c189a234d36c6b5c51f814007d5d779bf42f0191","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/tag-cat-item.ejs","hash":"62e78d4f9cccaa1f32121309498596d6b4c5f0ad","modified":1510800380000},{"_id":"themes/alpha-dust/layout/_partial/pagination.ejs","hash":"b9ec572a16d79cba2341211d7623cd04d2b6e521","modified":1510800380000},{"_id":"themes/alpha-dust/template/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1510800380000},{"_id":"themes/alpha-dust/template/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1510800380000},{"_id":"themes/alpha-dust/template/css/style.css","hash":"50bf62012aa42d76e71ef6c6d359e0c6b02f1f41","modified":1510800380000},{"_id":"themes/alpha-dust/template/css/style.styl","hash":"792ff84e3a2b75cbdc216c8b37089eff0c4ec6bc","modified":1510800380000},{"_id":"themes/alpha-dust/template/img/bg-pattern copy.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1510800380000},{"_id":"themes/alpha-dust/template/img/bg-pattern-blue.png","hash":"07016986a35c5bfc04c1599829d6a4798c966731","modified":1510800380000},{"_id":"themes/alpha-dust/template/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1510800380000},{"_id":"themes/alpha-dust/template/img/hex-bg.png","hash":"a8444a553dd0fd7db09eda830bd3346cc87fc60e","modified":1510800380000},{"_id":"themes/alpha-dust/template/js/main.js","hash":"656d203e231f4533d97654816ff285fcbdfd0956","modified":1510800380000},{"_id":"themes/alpha-dust/.git/refs/heads/master","hash":"65e94990198d9c4f94567b7760866b9f91b02861","modified":1510800380000},{"_id":"themes/alpha-dust/.git/objects/pack/pack-b2720955267b5e2b1ad8cdf6de0e26421a39e1f6.idx","hash":"88bbcd222954b43f940e522d9bd2531757eb1f0b","modified":1510800380000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1510800380000},{"_id":"themes/alpha-dust/template/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1510800380000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1510800380000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1510800380000},{"_id":"themes/alpha-dust/template/img/session_image.jpeg","hash":"5a3669c0564044f56cb7cea464119a8e388fb18f","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/archive.styl","hash":"77f7b4341cb8d12191035150de6bb04635eb2a89","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/base.styl","hash":"f01047771a92520cf318930331517f4c9e70c04a","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/code.styl","hash":"3d2bbfef131c2f3fc5d44f54597da850ce29e2cf","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/footer.styl","hash":"0a086dfb77bc55b27378f97e442e3a696f69048f","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/header.styl","hash":"2e1e2ab562719127c7e216a49f8d7c02f9a0c2c4","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/menu.styl","hash":"746c0bc7b37096b5f0f0a451c4783a054b22c309","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/pagination.styl","hash":"2368cc9bd2404bce950b55fb2d9be3e7f1e1039c","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/post-content.styl","hash":"117b655a4f0c78b3cb3fb7be3e09b829c1debc49","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/post-layout.styl","hash":"b60fbbd78ca88d2174db1426cf941b6c998dd823","modified":1510800380000},{"_id":"themes/alpha-dust/source/css/_partial/variables.styl","hash":"789108805cf6d536b8a979a722b5b26a7e27fb28","modified":1510800380000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1510800380000},{"_id":"themes/alpha-dust/.git/logs/refs/heads/master","hash":"e49feb6170ef3f431deadbbc88acc60b7dc909c3","modified":1510800380000},{"_id":"themes/alpha-dust/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1510800380000},{"_id":"themes/alpha-dust/.git/logs/refs/remotes/origin/HEAD","hash":"e49feb6170ef3f431deadbbc88acc60b7dc909c3","modified":1510800380000},{"_id":"themes/alpha-dust/template/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1510800380000},{"_id":"themes/alpha-dust/.git/objects/pack/pack-b2720955267b5e2b1ad8cdf6de0e26421a39e1f6.pack","hash":"260b69e273cfdc1bde9b15c8ac217b93fb2b48bb","modified":1510800380000},{"_id":"public/2017/undefined  typeth/15/hello-world/index.html","hash":"fd98f0e808e1c39eefdab32c1e286d3bce1290a3","modified":1510800664902},{"_id":"public/archives/index.html","hash":"9636a734c5e57b791a37d22bcf9f7ea3bf656960","modified":1510800664902},{"_id":"public/archives/2017/index.html","hash":"8c37664d98afc2d3a8d4f892f0f83e1dbbdbcf0c","modified":1510800664902},{"_id":"public/archives/2017/11/index.html","hash":"c660f0073e1a9d6821392855da0a26f46798d0f6","modified":1510800664902},{"_id":"public/2017/undefined  typeth/15/苹果手机铃声设置（非越狱、无需下载软件2017最新版本）/index.html","hash":"565c29c4b5e0ecda2de5f23809f20afdddf28558","modified":1510800664902},{"_id":"public/2017/undefined  typeth/15/CocoaPods最新镜像安装方式和常用相关命令（卸载，降级）/index.html","hash":"9b3b4d71b2485a2cef655e3d53b2402604b45dca","modified":1510800664902},{"_id":"public/2017/undefined  typeth/15/仅仅一个UIImageView就可以实现无限轮播图效果/index.html","hash":"a5f4209e88d31b389ae4dba1678757edab61ba1e","modified":1510800664902},{"_id":"public/2017/undefined  typeth/15/根据图片获取拍摄地点和拍摄时间/index.html","hash":"43dd7183cb1fe0bf54efeb84d95383aaf74f7e1d","modified":1510800664902},{"_id":"public/index.html","hash":"0a30b9bbc42212394cfe4464b4050fd57f386736","modified":1510800664903},{"_id":"public/img/bg-pattern.png","hash":"932374ff0b431bf83d092948e1714d90254dd92e","modified":1510800664904},{"_id":"public/css/style.css","hash":"a8b4312a0a6e600e3c1629df20e2860757370d10","modified":1510800665155},{"_id":"public/js/main.js","hash":"7ee829ab42cf4d81280d20b5d664759436b19075","modified":1510800665155}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-11-15T14:22:57.000Z","updated":"2017-11-15T14:22:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja1vphkd0000p9fyika5cjt1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"仅仅一个UIImageView就可以实现无限轮播图效果","date":"2017-11-15T15:04:26.000Z","_content":"![效果图](http://upload-images.jianshu.io/upload_images/1505288-93870e8644cd442d.gif?imageMogr2/auto-orient/strip)\n\n首先感谢右侧链接代码中的图片素材😁~[大神使用UICollectionView实现的轮播图](http://www.code4app.com/forum.php?mod=viewthread&tid=11742&extra=page%3D1)\n\n据说此三方好多好多人用[强大的第三方框架SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView)\n\n###轮播图的实现方式\n>1. 使用UIScrollView通过contentSize设置UIImageView的展示预处理\n>2. 使用UICollectionView通过设置item\n>3. 使用UISwipeGestureRecognizeror或者TouchesBegan等方法\n\n网络上大部分是使用UIScrollView配合三个或者两个UIImageView来实现的轮播图，就再想可不可以使用一个UIImgeView实现，从而第三种实现方式也就诞生了，虽然不是特别实用，但是也算是一种简单思维\n\n-----\n\n###UISwipeGestureRecognizeror（清扫手势）逻辑\n>1. 通过UIImageView添加向左向右的轻扫手势\n>2. 当触发轻扫手势的响应事件时，重新设置Index\n>3. 使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画\n>4. 更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView\n>5. 赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿\n\n-----\n\n###TouchesBegan等方法的逻辑\n\n>1. 写一个UIImageView的子类，并在其中实现Began、Move、End方法\n>1. 和使用UIBezierPath绘制画板同理，首先在Touch等方法中获取对应的点\n>2. 根据点的位置改变来判断向左滑还是向右滑\n>3. 使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画\n>4. 更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView\n>5. 赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿\n\n---\n\n>主要以UISwipeGestureRecognizeror为例子🌰\n\n###UISwipeGestureRecognizeror（清扫手势）相关代码\n\n> 一些懒加载，注释已经标明清楚\n\n    var selectedIndex = 0//当前图片\n   \n    lazy var imageView: UIImageView = {//展示image\n        let imageview = UIImageView()\n        imageview.image = UIImage(named: \"\\(self.selectedIndex)\")\n        return imageview\n    }()\n    \n    lazy var swipeRight: UISwipeGestureRecognizer = {//从左往右滑手势\n        let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapRightAction))\n        swipe.direction = .right\n\n        return swipe\n    }()\n\n    lazy var swipeLeft: UISwipeGestureRecognizer = {//从右往左滑手势\n        let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapLeftAction))\n        \n        swipe.direction = .left\n        return swipe\n    }()\n    \n    lazy var page: UIPageControl = {\n        \n        let page = UIPageControl()\n        \n        page.numberOfPages = self.dataList.count\n        \n        page.currentPage = self.selectedIndex\n        \n        page.pageIndicatorTintColor = UIColor.green\n        \n        page.currentPageIndicatorTintColor = UIColor.red\n        \n        return page\n    }()\n    \n    lazy var dataList: Array<String> = {//image数据源\n        \n        var arr: Array<String> = []\n        \n        for i in 0...10 {\n            arr.append(\"\\(i)\")\n        }\n        \n        return arr\n    }()\n\n> viewDidLoad\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        imageView.frame = CGRect(x: 0, y: 0, width: screen_width, height: screen_height)\n\n        //重要！！！！！！！ 给imageView添加手势需要将isUserInteractionEnabled设置为true\n        imageView.isUserInteractionEnabled = true\n        \n        //添加向左手势\n        imageView.addGestureRecognizer(swipeLeft)\n\n        //添加向右手势\n        imageView.addGestureRecognizer(swipeRight)\n        \n        //获取page的size\n        let pageSize = page.size(forNumberOfPages: dataList.count)\n        \n        page.frame = CGRect(x: 0, y: imageView.frame.maxY - pageSize.height, width: pageSize.width, height: pageSize.height)\n        \n        page.center.x = imageView.frame.width / 2\n        \n        view.addSubview(imageView)\n        \n        view.addSubview(page)\n        \n    }\n\n> 从左往右滑动的响应事件\n\n    func tapRightAction() {//从左往右滑动\n        \n        //使用CA转场动画来改变方式\n        \n        let transition = CATransition()\n        \n        transition.type = kCATransitionPush\n        \n        transition.subtype = kCATransitionFromLeft\n\n        //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最左侧，将selectedIndex重置为10\n        selectedIndex = selectedIndex <= 0 ? 10 : selectedIndex - 1\n        \n        page.currentPage = selectedIndex\n        \n        imageView.image = UIImage(named: \"\\(dataList[selectedIndex])\")\n        \n        imageView.layer.add(transition, forKey: \"right\")\n        \n    }\n> 从右往左滑动的响应事件\n\n    func tapRightAction() {//从左往右滑动\n\n        //使用CA转场动画来改变方式\n        \n        let transition = CATransition()\n        \n        transition.type = kCATransitionPush\n        \n        transition.subtype = kCATransitionFromRight\n                \n        //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最右侧，将selectedIndex重置为0\n        selectedIndex = selectedIndex >= 10 ? 0 : selectedIndex + 1\n        \n        page.currentPage = selectedIndex\n        \n        imageView.image = UIImage(named: \"\\(dataList[selectedIndex])\")\n        \n        imageView.layer.add(transition, forKey: \"left\")\n                \n    }\n\nTouches基本同理，再此不一一赘述了\n\n----\n\n>总结\n1. 使用UISwipeGestureRecognizer无需考虑UIImageView的复用问题，因为只有一个imaegView\n2. 轮播图分为手动和自动，本文为手动控制没有加timer，如果改为自动，只需要在在定时调用方法即可\n3. 使用UISwipeGestureRecognizer实现，手指滑动一点点，再划回来，这个暂时没有好的解决方式，但是可以使用Touches的相关方法解决，因为手指离开才回去调用End方法\n\n----\n\n> 小尾巴~~~\n\n为什么很多人不用这种方法，坐等各位大神回复，个人觉得没有什么问题，完全可以精仿\n\n>demo地址\n[github](https://github.com/pengshengsongcode/CycleImageView)","source":"_posts/仅仅一个UIImageView就可以实现无限轮播图效果.md","raw":"---\ntitle: 仅仅一个UIImageView就可以实现无限轮播图效果\ndate: 2017-11-15 23:04:26\ntags:\n---\n![效果图](http://upload-images.jianshu.io/upload_images/1505288-93870e8644cd442d.gif?imageMogr2/auto-orient/strip)\n\n首先感谢右侧链接代码中的图片素材😁~[大神使用UICollectionView实现的轮播图](http://www.code4app.com/forum.php?mod=viewthread&tid=11742&extra=page%3D1)\n\n据说此三方好多好多人用[强大的第三方框架SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView)\n\n###轮播图的实现方式\n>1. 使用UIScrollView通过contentSize设置UIImageView的展示预处理\n>2. 使用UICollectionView通过设置item\n>3. 使用UISwipeGestureRecognizeror或者TouchesBegan等方法\n\n网络上大部分是使用UIScrollView配合三个或者两个UIImageView来实现的轮播图，就再想可不可以使用一个UIImgeView实现，从而第三种实现方式也就诞生了，虽然不是特别实用，但是也算是一种简单思维\n\n-----\n\n###UISwipeGestureRecognizeror（清扫手势）逻辑\n>1. 通过UIImageView添加向左向右的轻扫手势\n>2. 当触发轻扫手势的响应事件时，重新设置Index\n>3. 使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画\n>4. 更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView\n>5. 赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿\n\n-----\n\n###TouchesBegan等方法的逻辑\n\n>1. 写一个UIImageView的子类，并在其中实现Began、Move、End方法\n>1. 和使用UIBezierPath绘制画板同理，首先在Touch等方法中获取对应的点\n>2. 根据点的位置改变来判断向左滑还是向右滑\n>3. 使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画\n>4. 更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView\n>5. 赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿\n\n---\n\n>主要以UISwipeGestureRecognizeror为例子🌰\n\n###UISwipeGestureRecognizeror（清扫手势）相关代码\n\n> 一些懒加载，注释已经标明清楚\n\n    var selectedIndex = 0//当前图片\n   \n    lazy var imageView: UIImageView = {//展示image\n        let imageview = UIImageView()\n        imageview.image = UIImage(named: \"\\(self.selectedIndex)\")\n        return imageview\n    }()\n    \n    lazy var swipeRight: UISwipeGestureRecognizer = {//从左往右滑手势\n        let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapRightAction))\n        swipe.direction = .right\n\n        return swipe\n    }()\n\n    lazy var swipeLeft: UISwipeGestureRecognizer = {//从右往左滑手势\n        let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapLeftAction))\n        \n        swipe.direction = .left\n        return swipe\n    }()\n    \n    lazy var page: UIPageControl = {\n        \n        let page = UIPageControl()\n        \n        page.numberOfPages = self.dataList.count\n        \n        page.currentPage = self.selectedIndex\n        \n        page.pageIndicatorTintColor = UIColor.green\n        \n        page.currentPageIndicatorTintColor = UIColor.red\n        \n        return page\n    }()\n    \n    lazy var dataList: Array<String> = {//image数据源\n        \n        var arr: Array<String> = []\n        \n        for i in 0...10 {\n            arr.append(\"\\(i)\")\n        }\n        \n        return arr\n    }()\n\n> viewDidLoad\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        imageView.frame = CGRect(x: 0, y: 0, width: screen_width, height: screen_height)\n\n        //重要！！！！！！！ 给imageView添加手势需要将isUserInteractionEnabled设置为true\n        imageView.isUserInteractionEnabled = true\n        \n        //添加向左手势\n        imageView.addGestureRecognizer(swipeLeft)\n\n        //添加向右手势\n        imageView.addGestureRecognizer(swipeRight)\n        \n        //获取page的size\n        let pageSize = page.size(forNumberOfPages: dataList.count)\n        \n        page.frame = CGRect(x: 0, y: imageView.frame.maxY - pageSize.height, width: pageSize.width, height: pageSize.height)\n        \n        page.center.x = imageView.frame.width / 2\n        \n        view.addSubview(imageView)\n        \n        view.addSubview(page)\n        \n    }\n\n> 从左往右滑动的响应事件\n\n    func tapRightAction() {//从左往右滑动\n        \n        //使用CA转场动画来改变方式\n        \n        let transition = CATransition()\n        \n        transition.type = kCATransitionPush\n        \n        transition.subtype = kCATransitionFromLeft\n\n        //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最左侧，将selectedIndex重置为10\n        selectedIndex = selectedIndex <= 0 ? 10 : selectedIndex - 1\n        \n        page.currentPage = selectedIndex\n        \n        imageView.image = UIImage(named: \"\\(dataList[selectedIndex])\")\n        \n        imageView.layer.add(transition, forKey: \"right\")\n        \n    }\n> 从右往左滑动的响应事件\n\n    func tapRightAction() {//从左往右滑动\n\n        //使用CA转场动画来改变方式\n        \n        let transition = CATransition()\n        \n        transition.type = kCATransitionPush\n        \n        transition.subtype = kCATransitionFromRight\n                \n        //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最右侧，将selectedIndex重置为0\n        selectedIndex = selectedIndex >= 10 ? 0 : selectedIndex + 1\n        \n        page.currentPage = selectedIndex\n        \n        imageView.image = UIImage(named: \"\\(dataList[selectedIndex])\")\n        \n        imageView.layer.add(transition, forKey: \"left\")\n                \n    }\n\nTouches基本同理，再此不一一赘述了\n\n----\n\n>总结\n1. 使用UISwipeGestureRecognizer无需考虑UIImageView的复用问题，因为只有一个imaegView\n2. 轮播图分为手动和自动，本文为手动控制没有加timer，如果改为自动，只需要在在定时调用方法即可\n3. 使用UISwipeGestureRecognizer实现，手指滑动一点点，再划回来，这个暂时没有好的解决方式，但是可以使用Touches的相关方法解决，因为手指离开才回去调用End方法\n\n----\n\n> 小尾巴~~~\n\n为什么很多人不用这种方法，坐等各位大神回复，个人觉得没有什么问题，完全可以精仿\n\n>demo地址\n[github](https://github.com/pengshengsongcode/CycleImageView)","slug":"仅仅一个UIImageView就可以实现无限轮播图效果","published":1,"updated":"2017-11-15T15:05:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja1vphkh0001p9fyhpqbnvmc","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-93870e8644cd442d.gif?imageMogr2/auto-orient/strip\" alt=\"效果图\"></p>\n<p>首先感谢右侧链接代码中的图片素材😁~<a href=\"http://www.code4app.com/forum.php?mod=viewthread&amp;tid=11742&amp;extra=page%3D1\" target=\"_blank\" rel=\"noopener\">大神使用UICollectionView实现的轮播图</a></p>\n<p>据说此三方好多好多人用<a href=\"https://github.com/gsdios/SDCycleScrollView\" target=\"_blank\" rel=\"noopener\">强大的第三方框架SDCycleScrollView</a></p>\n<p>###轮播图的实现方式</p>\n<blockquote>\n<ol>\n<li>使用UIScrollView通过contentSize设置UIImageView的展示预处理</li>\n<li>使用UICollectionView通过设置item</li>\n<li>使用UISwipeGestureRecognizeror或者TouchesBegan等方法</li>\n</ol>\n</blockquote>\n<p>网络上大部分是使用UIScrollView配合三个或者两个UIImageView来实现的轮播图，就再想可不可以使用一个UIImgeView实现，从而第三种实现方式也就诞生了，虽然不是特别实用，但是也算是一种简单思维</p>\n<hr>\n<p>###UISwipeGestureRecognizeror（清扫手势）逻辑</p>\n<blockquote>\n<ol>\n<li>通过UIImageView添加向左向右的轻扫手势</li>\n<li>当触发轻扫手势的响应事件时，重新设置Index</li>\n<li>使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画</li>\n<li>更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView</li>\n<li>赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿</li>\n</ol>\n</blockquote>\n<hr>\n<p>###TouchesBegan等方法的逻辑</p>\n<blockquote>\n<ol>\n<li>写一个UIImageView的子类，并在其中实现Began、Move、End方法</li>\n<li>和使用UIBezierPath绘制画板同理，首先在Touch等方法中获取对应的点</li>\n<li>根据点的位置改变来判断向左滑还是向右滑</li>\n<li>使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画</li>\n<li>更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView</li>\n<li>赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿</li>\n</ol>\n</blockquote>\n<hr>\n<blockquote>\n<p>主要以UISwipeGestureRecognizeror为例子🌰</p>\n</blockquote>\n<p>###UISwipeGestureRecognizeror（清扫手势）相关代码</p>\n<blockquote>\n<p>一些懒加载，注释已经标明清楚</p>\n</blockquote>\n<pre><code>var selectedIndex = 0//当前图片\n\nlazy var imageView: UIImageView = {//展示image\n    let imageview = UIImageView()\n    imageview.image = UIImage(named: &quot;\\(self.selectedIndex)&quot;)\n    return imageview\n}()\n\nlazy var swipeRight: UISwipeGestureRecognizer = {//从左往右滑手势\n    let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapRightAction))\n    swipe.direction = .right\n\n    return swipe\n}()\n\nlazy var swipeLeft: UISwipeGestureRecognizer = {//从右往左滑手势\n    let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapLeftAction))\n\n    swipe.direction = .left\n    return swipe\n}()\n\nlazy var page: UIPageControl = {\n\n    let page = UIPageControl()\n\n    page.numberOfPages = self.dataList.count\n\n    page.currentPage = self.selectedIndex\n\n    page.pageIndicatorTintColor = UIColor.green\n\n    page.currentPageIndicatorTintColor = UIColor.red\n\n    return page\n}()\n\nlazy var dataList: Array&lt;String&gt; = {//image数据源\n\n    var arr: Array&lt;String&gt; = []\n\n    for i in 0...10 {\n        arr.append(&quot;\\(i)&quot;)\n    }\n\n    return arr\n}()\n</code></pre><blockquote>\n<p>viewDidLoad</p>\n</blockquote>\n<pre><code>override func viewDidLoad() {\n    super.viewDidLoad()\n\n    imageView.frame = CGRect(x: 0, y: 0, width: screen_width, height: screen_height)\n\n    //重要！！！！！！！ 给imageView添加手势需要将isUserInteractionEnabled设置为true\n    imageView.isUserInteractionEnabled = true\n\n    //添加向左手势\n    imageView.addGestureRecognizer(swipeLeft)\n\n    //添加向右手势\n    imageView.addGestureRecognizer(swipeRight)\n\n    //获取page的size\n    let pageSize = page.size(forNumberOfPages: dataList.count)\n\n    page.frame = CGRect(x: 0, y: imageView.frame.maxY - pageSize.height, width: pageSize.width, height: pageSize.height)\n\n    page.center.x = imageView.frame.width / 2\n\n    view.addSubview(imageView)\n\n    view.addSubview(page)\n\n}\n</code></pre><blockquote>\n<p>从左往右滑动的响应事件</p>\n</blockquote>\n<pre><code>func tapRightAction() {//从左往右滑动\n\n    //使用CA转场动画来改变方式\n\n    let transition = CATransition()\n\n    transition.type = kCATransitionPush\n\n    transition.subtype = kCATransitionFromLeft\n\n    //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最左侧，将selectedIndex重置为10\n    selectedIndex = selectedIndex &lt;= 0 ? 10 : selectedIndex - 1\n\n    page.currentPage = selectedIndex\n\n    imageView.image = UIImage(named: &quot;\\(dataList[selectedIndex])&quot;)\n\n    imageView.layer.add(transition, forKey: &quot;right&quot;)\n\n}\n</code></pre><blockquote>\n<p>从右往左滑动的响应事件</p>\n</blockquote>\n<pre><code>func tapRightAction() {//从左往右滑动\n\n    //使用CA转场动画来改变方式\n\n    let transition = CATransition()\n\n    transition.type = kCATransitionPush\n\n    transition.subtype = kCATransitionFromRight\n\n    //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最右侧，将selectedIndex重置为0\n    selectedIndex = selectedIndex &gt;= 10 ? 0 : selectedIndex + 1\n\n    page.currentPage = selectedIndex\n\n    imageView.image = UIImage(named: &quot;\\(dataList[selectedIndex])&quot;)\n\n    imageView.layer.add(transition, forKey: &quot;left&quot;)\n\n}\n</code></pre><p>Touches基本同理，再此不一一赘述了</p>\n<hr>\n<blockquote>\n<p>总结</p>\n<ol>\n<li>使用UISwipeGestureRecognizer无需考虑UIImageView的复用问题，因为只有一个imaegView</li>\n<li>轮播图分为手动和自动，本文为手动控制没有加timer，如果改为自动，只需要在在定时调用方法即可</li>\n<li>使用UISwipeGestureRecognizer实现，手指滑动一点点，再划回来，这个暂时没有好的解决方式，但是可以使用Touches的相关方法解决，因为手指离开才回去调用End方法</li>\n</ol>\n</blockquote>\n<hr>\n<blockquote>\n<p>小尾巴~~~</p>\n</blockquote>\n<p>为什么很多人不用这种方法，坐等各位大神回复，个人觉得没有什么问题，完全可以精仿</p>\n<blockquote>\n<p>demo地址<br><a href=\"https://github.com/pengshengsongcode/CycleImageView\" target=\"_blank\" rel=\"noopener\">github</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-93870e8644cd442d.gif?imageMogr2/auto-orient/strip\" alt=\"效果图\"></p>\n<p>首先感谢右侧链接代码中的图片素材😁~<a href=\"http://www.code4app.com/forum.php?mod=viewthread&amp;tid=11742&amp;extra=page%3D1\" target=\"_blank\" rel=\"noopener\">大神使用UICollectionView实现的轮播图</a></p>\n<p>据说此三方好多好多人用<a href=\"https://github.com/gsdios/SDCycleScrollView\" target=\"_blank\" rel=\"noopener\">强大的第三方框架SDCycleScrollView</a></p>\n<p>###轮播图的实现方式</p>\n<blockquote>\n<ol>\n<li>使用UIScrollView通过contentSize设置UIImageView的展示预处理</li>\n<li>使用UICollectionView通过设置item</li>\n<li>使用UISwipeGestureRecognizeror或者TouchesBegan等方法</li>\n</ol>\n</blockquote>\n<p>网络上大部分是使用UIScrollView配合三个或者两个UIImageView来实现的轮播图，就再想可不可以使用一个UIImgeView实现，从而第三种实现方式也就诞生了，虽然不是特别实用，但是也算是一种简单思维</p>\n<hr>\n<p>###UISwipeGestureRecognizeror（清扫手势）逻辑</p>\n<blockquote>\n<ol>\n<li>通过UIImageView添加向左向右的轻扫手势</li>\n<li>当触发轻扫手势的响应事件时，重新设置Index</li>\n<li>使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画</li>\n<li>更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView</li>\n<li>赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿</li>\n</ol>\n</blockquote>\n<hr>\n<p>###TouchesBegan等方法的逻辑</p>\n<blockquote>\n<ol>\n<li>写一个UIImageView的子类，并在其中实现Began、Move、End方法</li>\n<li>和使用UIBezierPath绘制画板同理，首先在Touch等方法中获取对应的点</li>\n<li>根据点的位置改变来判断向左滑还是向右滑</li>\n<li>使用CATransition的Type（Push）和SubType（Left/Right）来进行实现对应的向左向右的转场动画</li>\n<li>更改完Index时，在CATransition动画中从img数组中取出对应图片并赋值给UIImageView</li>\n<li>赋值图片的同时更改pageControl的currentPage来实现轮播图的精仿</li>\n</ol>\n</blockquote>\n<hr>\n<blockquote>\n<p>主要以UISwipeGestureRecognizeror为例子🌰</p>\n</blockquote>\n<p>###UISwipeGestureRecognizeror（清扫手势）相关代码</p>\n<blockquote>\n<p>一些懒加载，注释已经标明清楚</p>\n</blockquote>\n<pre><code>var selectedIndex = 0//当前图片\n\nlazy var imageView: UIImageView = {//展示image\n    let imageview = UIImageView()\n    imageview.image = UIImage(named: &quot;\\(self.selectedIndex)&quot;)\n    return imageview\n}()\n\nlazy var swipeRight: UISwipeGestureRecognizer = {//从左往右滑手势\n    let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapRightAction))\n    swipe.direction = .right\n\n    return swipe\n}()\n\nlazy var swipeLeft: UISwipeGestureRecognizer = {//从右往左滑手势\n    let swipe = UISwipeGestureRecognizer(target: self, action: #selector(tapLeftAction))\n\n    swipe.direction = .left\n    return swipe\n}()\n\nlazy var page: UIPageControl = {\n\n    let page = UIPageControl()\n\n    page.numberOfPages = self.dataList.count\n\n    page.currentPage = self.selectedIndex\n\n    page.pageIndicatorTintColor = UIColor.green\n\n    page.currentPageIndicatorTintColor = UIColor.red\n\n    return page\n}()\n\nlazy var dataList: Array&lt;String&gt; = {//image数据源\n\n    var arr: Array&lt;String&gt; = []\n\n    for i in 0...10 {\n        arr.append(&quot;\\(i)&quot;)\n    }\n\n    return arr\n}()\n</code></pre><blockquote>\n<p>viewDidLoad</p>\n</blockquote>\n<pre><code>override func viewDidLoad() {\n    super.viewDidLoad()\n\n    imageView.frame = CGRect(x: 0, y: 0, width: screen_width, height: screen_height)\n\n    //重要！！！！！！！ 给imageView添加手势需要将isUserInteractionEnabled设置为true\n    imageView.isUserInteractionEnabled = true\n\n    //添加向左手势\n    imageView.addGestureRecognizer(swipeLeft)\n\n    //添加向右手势\n    imageView.addGestureRecognizer(swipeRight)\n\n    //获取page的size\n    let pageSize = page.size(forNumberOfPages: dataList.count)\n\n    page.frame = CGRect(x: 0, y: imageView.frame.maxY - pageSize.height, width: pageSize.width, height: pageSize.height)\n\n    page.center.x = imageView.frame.width / 2\n\n    view.addSubview(imageView)\n\n    view.addSubview(page)\n\n}\n</code></pre><blockquote>\n<p>从左往右滑动的响应事件</p>\n</blockquote>\n<pre><code>func tapRightAction() {//从左往右滑动\n\n    //使用CA转场动画来改变方式\n\n    let transition = CATransition()\n\n    transition.type = kCATransitionPush\n\n    transition.subtype = kCATransitionFromLeft\n\n    //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最左侧，将selectedIndex重置为10\n    selectedIndex = selectedIndex &lt;= 0 ? 10 : selectedIndex - 1\n\n    page.currentPage = selectedIndex\n\n    imageView.image = UIImage(named: &quot;\\(dataList[selectedIndex])&quot;)\n\n    imageView.layer.add(transition, forKey: &quot;right&quot;)\n\n}\n</code></pre><blockquote>\n<p>从右往左滑动的响应事件</p>\n</blockquote>\n<pre><code>func tapRightAction() {//从左往右滑动\n\n    //使用CA转场动画来改变方式\n\n    let transition = CATransition()\n\n    transition.type = kCATransitionPush\n\n    transition.subtype = kCATransitionFromRight\n\n    //这句话也就是最重要的，根据selectedIndex的值来确定是否已经到最左侧，如果到最右侧，将selectedIndex重置为0\n    selectedIndex = selectedIndex &gt;= 10 ? 0 : selectedIndex + 1\n\n    page.currentPage = selectedIndex\n\n    imageView.image = UIImage(named: &quot;\\(dataList[selectedIndex])&quot;)\n\n    imageView.layer.add(transition, forKey: &quot;left&quot;)\n\n}\n</code></pre><p>Touches基本同理，再此不一一赘述了</p>\n<hr>\n<blockquote>\n<p>总结</p>\n<ol>\n<li>使用UISwipeGestureRecognizer无需考虑UIImageView的复用问题，因为只有一个imaegView</li>\n<li>轮播图分为手动和自动，本文为手动控制没有加timer，如果改为自动，只需要在在定时调用方法即可</li>\n<li>使用UISwipeGestureRecognizer实现，手指滑动一点点，再划回来，这个暂时没有好的解决方式，但是可以使用Touches的相关方法解决，因为手指离开才回去调用End方法</li>\n</ol>\n</blockquote>\n<hr>\n<blockquote>\n<p>小尾巴~~~</p>\n</blockquote>\n<p>为什么很多人不用这种方法，坐等各位大神回复，个人觉得没有什么问题，完全可以精仿</p>\n<blockquote>\n<p>demo地址<br><a href=\"https://github.com/pengshengsongcode/CycleImageView\" target=\"_blank\" rel=\"noopener\">github</a></p>\n</blockquote>\n"},{"title":"苹果手机铃声设置（非越狱、无需下载软件2017最新版本）","date":"2017-11-15T14:53:16.000Z","_content":"\n本文中提到的方式，暂时只支持已有歌曲，如果觉得麻烦，文章结尾有弄完的.m4r文件，下载下来直接走第六步即可\n\n1、打开网易云音乐、找到你想作为手机铃声的歌曲，并下载至桌面\n\n![屏幕快照 2017-11-14 下午1.52.15.png](http://upload-images.jianshu.io/upload_images/1505288-d4c0bff872b4545d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2、打开QuickTime Player,并将下载的歌曲文件拖拽进去\n\n![屏幕快照 2017-11-14 下午1.54.20.png](http://upload-images.jianshu.io/upload_images/1505288-71bdb551b600488b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3、点击nav上的编辑 - 修建，进行对音乐的截取（控制在40S下）\n\n![屏幕快照 2017-11-14 下午1.56.16.png](http://upload-images.jianshu.io/upload_images/1505288-579015eb6b3c41e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4、将截取的音乐导出至桌面\n\n![屏幕快照 2017-11-14 下午1.57.29.png](http://upload-images.jianshu.io/upload_images/1505288-6214dde13080cd59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n5、并将文件后缀添加\".m4r\"字样，并选择 使用m4r\n\n![屏幕快照 2017-11-14 下午2.02.51.png](http://upload-images.jianshu.io/upload_images/1505288-2cac7bae3c71debb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n[图片上传中...(屏幕快照 2017-11-14 下午2.02.19.png-b7332f-1510639448164-0)]\n\n6、打开电脑iTunes并链接自己手机，将.m4r文件拉进如图所示的界面\n\n![屏幕快照 2017-11-14 下午2.02.19.png](http://upload-images.jianshu.io/upload_images/1505288-cdc4f458362eda4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n7、使用手机打开设置 - 声音 - 铃声和震动 - 电话铃声，选择自定义的铃声就OK了\n\n![lADPBbCc1SD0_U_NBTbNAu4_750_1334.jpg_620x10000q90g.jpg](http://upload-images.jianshu.io/upload_images/1505288-28563e3d8834eba3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200)\n\n \n![lALPBbCc1SD0_VLNBTbNAu4_750_1334.png_620x10000q90g.jpg](http://upload-images.jianshu.io/upload_images/1505288-24e55709c1aaaae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200)\n\n样例文件： https://github.com/pengshengsongcode/DiyRingTone.git\n","source":"_posts/苹果手机铃声设置（非越狱、无需下载软件2017最新版本）.md","raw":"---\ntitle: 苹果手机铃声设置（非越狱、无需下载软件2017最新版本）\ndate: 2017-11-15 22:53:16\ntags:\n---\n\n本文中提到的方式，暂时只支持已有歌曲，如果觉得麻烦，文章结尾有弄完的.m4r文件，下载下来直接走第六步即可\n\n1、打开网易云音乐、找到你想作为手机铃声的歌曲，并下载至桌面\n\n![屏幕快照 2017-11-14 下午1.52.15.png](http://upload-images.jianshu.io/upload_images/1505288-d4c0bff872b4545d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2、打开QuickTime Player,并将下载的歌曲文件拖拽进去\n\n![屏幕快照 2017-11-14 下午1.54.20.png](http://upload-images.jianshu.io/upload_images/1505288-71bdb551b600488b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3、点击nav上的编辑 - 修建，进行对音乐的截取（控制在40S下）\n\n![屏幕快照 2017-11-14 下午1.56.16.png](http://upload-images.jianshu.io/upload_images/1505288-579015eb6b3c41e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4、将截取的音乐导出至桌面\n\n![屏幕快照 2017-11-14 下午1.57.29.png](http://upload-images.jianshu.io/upload_images/1505288-6214dde13080cd59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n5、并将文件后缀添加\".m4r\"字样，并选择 使用m4r\n\n![屏幕快照 2017-11-14 下午2.02.51.png](http://upload-images.jianshu.io/upload_images/1505288-2cac7bae3c71debb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n[图片上传中...(屏幕快照 2017-11-14 下午2.02.19.png-b7332f-1510639448164-0)]\n\n6、打开电脑iTunes并链接自己手机，将.m4r文件拉进如图所示的界面\n\n![屏幕快照 2017-11-14 下午2.02.19.png](http://upload-images.jianshu.io/upload_images/1505288-cdc4f458362eda4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n7、使用手机打开设置 - 声音 - 铃声和震动 - 电话铃声，选择自定义的铃声就OK了\n\n![lADPBbCc1SD0_U_NBTbNAu4_750_1334.jpg_620x10000q90g.jpg](http://upload-images.jianshu.io/upload_images/1505288-28563e3d8834eba3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200)\n\n \n![lALPBbCc1SD0_VLNBTbNAu4_750_1334.png_620x10000q90g.jpg](http://upload-images.jianshu.io/upload_images/1505288-24e55709c1aaaae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200)\n\n样例文件： https://github.com/pengshengsongcode/DiyRingTone.git\n","slug":"苹果手机铃声设置（非越狱、无需下载软件2017最新版本）","published":1,"updated":"2017-11-15T14:54:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja1vphkj0002p9fy5v54nntq","content":"<p>本文中提到的方式，暂时只支持已有歌曲，如果觉得麻烦，文章结尾有弄完的.m4r文件，下载下来直接走第六步即可</p>\n<p>1、打开网易云音乐、找到你想作为手机铃声的歌曲，并下载至桌面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-d4c0bff872b4545d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.52.15.png\"></p>\n<p>2、打开QuickTime Player,并将下载的歌曲文件拖拽进去</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-71bdb551b600488b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.54.20.png\"></p>\n<p>3、点击nav上的编辑 - 修建，进行对音乐的截取（控制在40S下）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-579015eb6b3c41e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.56.16.png\"></p>\n<p>4、将截取的音乐导出至桌面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-6214dde13080cd59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.57.29.png\"></p>\n<p>5、并将文件后缀添加”.m4r”字样，并选择 使用m4r</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-2cac7bae3c71debb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午2.02.51.png\"><br>[图片上传中…(屏幕快照 2017-11-14 下午2.02.19.png-b7332f-1510639448164-0)]</p>\n<p>6、打开电脑iTunes并链接自己手机，将.m4r文件拉进如图所示的界面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-cdc4f458362eda4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午2.02.19.png\"></p>\n<p>7、使用手机打开设置 - 声音 - 铃声和震动 - 电话铃声，选择自定义的铃声就OK了</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-28563e3d8834eba3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" alt=\"lADPBbCc1SD0_U_NBTbNAu4_750_1334.jpg_620x10000q90g.jpg\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-24e55709c1aaaae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" alt=\"lALPBbCc1SD0_VLNBTbNAu4_750_1334.png_620x10000q90g.jpg\"></p>\n<p>样例文件： <a href=\"https://github.com/pengshengsongcode/DiyRingTone.git\" target=\"_blank\" rel=\"noopener\">https://github.com/pengshengsongcode/DiyRingTone.git</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文中提到的方式，暂时只支持已有歌曲，如果觉得麻烦，文章结尾有弄完的.m4r文件，下载下来直接走第六步即可</p>\n<p>1、打开网易云音乐、找到你想作为手机铃声的歌曲，并下载至桌面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-d4c0bff872b4545d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.52.15.png\"></p>\n<p>2、打开QuickTime Player,并将下载的歌曲文件拖拽进去</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-71bdb551b600488b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.54.20.png\"></p>\n<p>3、点击nav上的编辑 - 修建，进行对音乐的截取（控制在40S下）</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-579015eb6b3c41e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.56.16.png\"></p>\n<p>4、将截取的音乐导出至桌面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-6214dde13080cd59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午1.57.29.png\"></p>\n<p>5、并将文件后缀添加”.m4r”字样，并选择 使用m4r</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-2cac7bae3c71debb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午2.02.51.png\"><br>[图片上传中…(屏幕快照 2017-11-14 下午2.02.19.png-b7332f-1510639448164-0)]</p>\n<p>6、打开电脑iTunes并链接自己手机，将.m4r文件拉进如图所示的界面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-cdc4f458362eda4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-11-14 下午2.02.19.png\"></p>\n<p>7、使用手机打开设置 - 声音 - 铃声和震动 - 电话铃声，选择自定义的铃声就OK了</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-28563e3d8834eba3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" alt=\"lADPBbCc1SD0_U_NBTbNAu4_750_1334.jpg_620x10000q90g.jpg\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-24e55709c1aaaae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200\" alt=\"lALPBbCc1SD0_VLNBTbNAu4_750_1334.png_620x10000q90g.jpg\"></p>\n<p>样例文件： <a href=\"https://github.com/pengshengsongcode/DiyRingTone.git\" target=\"_blank\" rel=\"noopener\">https://github.com/pengshengsongcode/DiyRingTone.git</a></p>\n"},{"title":"CocoaPods最新镜像安装方式和常用相关命令（卸载，降级）","date":"2017-11-15T15:04:43.000Z","_content":"###安装顺序\n> 1、安装brew，安装链接如若更新，请点击[此链接](http://brew.sh)查看\n```\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \n```\n***\n> 2、安装Ruby\n```\n$ brew install ruby\n```\n***\n> 3、安装CocoaPods\n  1.  移除现有 Ruby 默认源\n```\n$ gem sources --remove https://rubygems.org/\n```\n  2. 使用新的镜像源（非网络上的Taobao源）\n```\n $ gem sources -a https://gems.ruby-china.org/\n```\n  3.  验证是否成功\n```\n$ gem sources -l\n```\n  4. 安装CocoaPods\n```\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n\n![等待中](http://upload-images.jianshu.io/upload_images/1505288-d60693d4056982e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n###监测下载进度\n\n>1、跳转指定文件夹\n```\n$ cd ~/.cocoapods   \n```\n2、监测网络下载进度\n```\n$ du -sh *\n```\n\n![监测界面](http://upload-images.jianshu.io/upload_images/1505288-47ff3ae7ec8ccfdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nps： 再执行安装CocoaPods时 执行``` $ pod setup```需要等待大约半个多小时时间，有时等待了也会报错，此处可以偷鸡\n***\n###偷鸡教学\n\n> 1、[点击此处下载文件](http://pan.baidu.com/s/1hsr24uS)```提取密码为52r5 ```下载Repos文件并解压\n\n> 2、打开Terminal，输入命令行 ```open ~/.cocoapods```\n\n> 3、将解压文件替换文件夹Repos\n\n> 4、再次打开Terminal，输入命令行```pod search afn```\n> \n> 5、如果出现下图为安装完成\n\n\n![成功界面](http://upload-images.jianshu.io/upload_images/1505288-751aad7106fdcc8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> 查看CocoaPods版本\n```\n$ pod --version\n```\n\n###卸载CocoaPods\n> 1. 查看CocoaPods路径\n```\n$ which pod\n```\n> 2. 查看CocoaPods位置\n```\n$ sudo rm -rf 路径 \n```\n> 3. 查看CocoaPods版本（```-bash: /usr/local/bin/pod: No such file or directory```即删除成功）\n```\n$ pod --version\n```\n> 4. 打印gem 下的所有包查看cocoapods版本号\n```\n$ gem list\n```\n> 5. 移除程序包(如果要删除依赖包只需要更改“cocoapods”即可)\n```\n$ sudo gem uninstall cocoapods -v 版本号\n```\n> 6. 删除repos包（大约300+M）\n```\n$ rmdir ~/.cocoapods\n```\n\n###多版本共存与使用\n> 1. 安装指定版本Cocoapods\n```\n$ sudo gem install cocoapods -v 0.35.0\n```\n> 2. 使用指定版本Cocoapods\n ```\n$ pod _0.35.0_ install,    pod _0.38.2_ install\n```","source":"_posts/CocoaPods最新镜像安装方式和常用相关命令（卸载，降级）.md","raw":"---\ntitle: CocoaPods最新镜像安装方式和常用相关命令（卸载，降级）\ndate: 2017-11-15 23:04:43\ntags:\n---\n###安装顺序\n> 1、安装brew，安装链接如若更新，请点击[此链接](http://brew.sh)查看\n```\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" \n```\n***\n> 2、安装Ruby\n```\n$ brew install ruby\n```\n***\n> 3、安装CocoaPods\n  1.  移除现有 Ruby 默认源\n```\n$ gem sources --remove https://rubygems.org/\n```\n  2. 使用新的镜像源（非网络上的Taobao源）\n```\n $ gem sources -a https://gems.ruby-china.org/\n```\n  3.  验证是否成功\n```\n$ gem sources -l\n```\n  4. 安装CocoaPods\n```\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n\n![等待中](http://upload-images.jianshu.io/upload_images/1505288-d60693d4056982e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n###监测下载进度\n\n>1、跳转指定文件夹\n```\n$ cd ~/.cocoapods   \n```\n2、监测网络下载进度\n```\n$ du -sh *\n```\n\n![监测界面](http://upload-images.jianshu.io/upload_images/1505288-47ff3ae7ec8ccfdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nps： 再执行安装CocoaPods时 执行``` $ pod setup```需要等待大约半个多小时时间，有时等待了也会报错，此处可以偷鸡\n***\n###偷鸡教学\n\n> 1、[点击此处下载文件](http://pan.baidu.com/s/1hsr24uS)```提取密码为52r5 ```下载Repos文件并解压\n\n> 2、打开Terminal，输入命令行 ```open ~/.cocoapods```\n\n> 3、将解压文件替换文件夹Repos\n\n> 4、再次打开Terminal，输入命令行```pod search afn```\n> \n> 5、如果出现下图为安装完成\n\n\n![成功界面](http://upload-images.jianshu.io/upload_images/1505288-751aad7106fdcc8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> 查看CocoaPods版本\n```\n$ pod --version\n```\n\n###卸载CocoaPods\n> 1. 查看CocoaPods路径\n```\n$ which pod\n```\n> 2. 查看CocoaPods位置\n```\n$ sudo rm -rf 路径 \n```\n> 3. 查看CocoaPods版本（```-bash: /usr/local/bin/pod: No such file or directory```即删除成功）\n```\n$ pod --version\n```\n> 4. 打印gem 下的所有包查看cocoapods版本号\n```\n$ gem list\n```\n> 5. 移除程序包(如果要删除依赖包只需要更改“cocoapods”即可)\n```\n$ sudo gem uninstall cocoapods -v 版本号\n```\n> 6. 删除repos包（大约300+M）\n```\n$ rmdir ~/.cocoapods\n```\n\n###多版本共存与使用\n> 1. 安装指定版本Cocoapods\n```\n$ sudo gem install cocoapods -v 0.35.0\n```\n> 2. 使用指定版本Cocoapods\n ```\n$ pod _0.35.0_ install,    pod _0.38.2_ install\n```","slug":"CocoaPods最新镜像安装方式和常用相关命令（卸载，降级）","published":1,"updated":"2017-11-15T15:06:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja1vphkm0003p9fy6n23wej3","content":"<p>###安装顺序</p>\n<blockquote>\n<p>1、安装brew，安装链接如若更新，请点击<a href=\"http://brew.sh\" target=\"_blank\" rel=\"noopener\">此链接</a>查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>2、安装Ruby<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install ruby</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>3、安装CocoaPods</p>\n<ol>\n<li>移除现有 Ruby 默认源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>使用新的镜像源（非网络上的Taobao源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ gem sources -a https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources -l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装CocoaPods</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-d60693d4056982e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"等待中\"></p>\n<hr>\n<p>###监测下载进度</p>\n<blockquote>\n<p>1、跳转指定文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/.cocoapods</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>2、监测网络下载进度<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ du -sh *</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-47ff3ae7ec8ccfdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"监测界面\"></p>\n<p>ps： 再执行安装CocoaPods时 执行<figure class=\"highlight plain\"><figcaption><span>pod setup```需要等待大约半个多小时时间，有时等待了也会报错，此处可以偷鸡</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\">###偷鸡教学</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 1、[点击此处下载文件](http://pan.baidu.com/s/1hsr24uS)```提取密码为52r5 ```下载Repos文件并解压</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 2、打开Terminal，输入命令行 ```open ~/.cocoapods</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3、将解压文件替换文件夹Repos</p>\n<p>4、再次打开Terminal，输入命令行<figure class=\"highlight plain\"><figcaption><span>search afn```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 5、如果出现下图为安装完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">![成功界面](http://upload-images.jianshu.io/upload_images/1505288-751aad7106fdcc8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 查看CocoaPods版本</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>$ pod –version<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">###卸载CocoaPods</span><br><span class=\"line\">&gt; 1. 查看CocoaPods路径</span><br></pre></td></tr></table></figure></p>\n<p>$ which pod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 2. 查看CocoaPods位置</span><br></pre></td></tr></table></figure></p>\n<p>$ sudo rm -rf 路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 3. 查看CocoaPods版本（```-bash: /usr/local/bin/pod: No such file or directory```即删除成功）</span><br></pre></td></tr></table></figure></p>\n<p>$ pod –version<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 4. 打印gem 下的所有包查看cocoapods版本号</span><br></pre></td></tr></table></figure></p>\n<p>$ gem list<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 5. 移除程序包(如果要删除依赖包只需要更改“cocoapods”即可)</span><br></pre></td></tr></table></figure></p>\n<p>$ sudo gem uninstall cocoapods -v 版本号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 6. 删除repos包（大约300+M）</span><br></pre></td></tr></table></figure></p>\n<p>$ rmdir ~/.cocoapods<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">###多版本共存与使用</span><br><span class=\"line\">&gt; 1. 安装指定版本Cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>$ sudo gem install cocoapods -v 0.35.0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 2. 使用指定版本Cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>$ pod <em>0.35.0</em> install,    pod <em>0.38.2</em> install<br>```</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###安装顺序</p>\n<blockquote>\n<p>1、安装brew，安装链接如若更新，请点击<a href=\"http://brew.sh\" target=\"_blank\" rel=\"noopener\">此链接</a>查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>2、安装Ruby<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install ruby</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>3、安装CocoaPods</p>\n<ol>\n<li>移除现有 Ruby 默认源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>使用新的镜像源（非网络上的Taobao源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ gem sources -a https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources -l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装CocoaPods</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-d60693d4056982e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"等待中\"></p>\n<hr>\n<p>###监测下载进度</p>\n<blockquote>\n<p>1、跳转指定文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/.cocoapods</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>2、监测网络下载进度<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ du -sh *</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-47ff3ae7ec8ccfdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"监测界面\"></p>\n<p>ps： 再执行安装CocoaPods时 执行<figure class=\"highlight plain\"><figcaption><span>pod setup```需要等待大约半个多小时时间，有时等待了也会报错，此处可以偷鸡</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\">###偷鸡教学</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 1、[点击此处下载文件](http://pan.baidu.com/s/1hsr24uS)```提取密码为52r5 ```下载Repos文件并解压</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 2、打开Terminal，输入命令行 ```open ~/.cocoapods</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3、将解压文件替换文件夹Repos</p>\n<p>4、再次打开Terminal，输入命令行<figure class=\"highlight plain\"><figcaption><span>search afn```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 5、如果出现下图为安装完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">![成功界面](http://upload-images.jianshu.io/upload_images/1505288-751aad7106fdcc8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 查看CocoaPods版本</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>$ pod –version<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">###卸载CocoaPods</span><br><span class=\"line\">&gt; 1. 查看CocoaPods路径</span><br></pre></td></tr></table></figure></p>\n<p>$ which pod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 2. 查看CocoaPods位置</span><br></pre></td></tr></table></figure></p>\n<p>$ sudo rm -rf 路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 3. 查看CocoaPods版本（```-bash: /usr/local/bin/pod: No such file or directory```即删除成功）</span><br></pre></td></tr></table></figure></p>\n<p>$ pod –version<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 4. 打印gem 下的所有包查看cocoapods版本号</span><br></pre></td></tr></table></figure></p>\n<p>$ gem list<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 5. 移除程序包(如果要删除依赖包只需要更改“cocoapods”即可)</span><br></pre></td></tr></table></figure></p>\n<p>$ sudo gem uninstall cocoapods -v 版本号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 6. 删除repos包（大约300+M）</span><br></pre></td></tr></table></figure></p>\n<p>$ rmdir ~/.cocoapods<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">###多版本共存与使用</span><br><span class=\"line\">&gt; 1. 安装指定版本Cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>$ sudo gem install cocoapods -v 0.35.0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 2. 使用指定版本Cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>$ pod <em>0.35.0</em> install,    pod <em>0.38.2</em> install<br>```</p>\n"},{"title":"根据图片获取拍摄地点和拍摄时间","date":"2017-11-15T15:02:25.000Z","_content":"\n![效果图.gif](http://upload-images.jianshu.io/upload_images/1505288-78d9b8f676a4ac7e.gif?imageMogr2/auto-orient/strip)\n\n参考\n[iOS 获得图片的时间（通过拍照和取出）](http://blog.csdn.net/li1990101010/article/details/50462331)\n[如何获取iPhone拍摄的png照片的拍摄时间,位置信息等图片属性?  ](http://www.cocoachina.com/bbs/read.php?tid=103913png)\n\n###简单理念\n>1. 拍照获取\n拍照即可通过CoreLocation获取当前位置和当前时间。\n>2. 相册获取\n相册即可通过ALAssetsLibrary来获取拍摄时间和拍摄地点。\n\n本软件是通过imagePicker的代理回调中获取info，并从info中获取大量有关的信息，部分图片没有是因为拍照时没有录入信息，存在无网络和关闭权限功能。\n\n-----\n\n###引入头文件\n\n```\n#import <MobileCoreServices/MobileCoreServices.h>\n\n#import <ImageIO/CGImageProperties.h>\n\n#import <AssetsLibrary/AssetsLibrary.h>\n\n#import <CoreLocation/CoreLocation.h>\n\n#import \"NSDictionary+CLLocation.h\"\n```\n\n###定义属性\n\n```\n@property (nonatomic, strong) UIImagePickerController *imagePickerVC;\n\n@property (nonatomic, strong) CLLocationManager *locationmanager;//拍照定位\n\n@property (weak, nonatomic) IBOutlet UIImageView *imageView;\n@property (weak, nonatomic) IBOutlet UILabel *time;\n@property (weak, nonatomic) IBOutlet UILabel *jingdu;\n@property (weak, nonatomic) IBOutlet UILabel *weidu;\n@property (weak, nonatomic) IBOutlet UILabel *location;\n\n@property (nonatomic, copy) NSString *locationFormat;\n```\n\n\n###懒加载\n\n```\n#pragma mark 懒加载\n- (UIImagePickerController *)imagePickerVC {\n    if (!_imagePickerVC) {\n        _imagePickerVC = [[UIImagePickerController alloc] init];\n        // 设置资源来源（相册、相机、图库之一）\n        //        imagePickerVC.sourceType = UIImagePickerControllerSourceTypeCamera;\n        // 设置可用的媒体类型、默认只包含kUTTypeImage，如果想选择视频，请添加kUTTypeMovie\n        // 如果选择的是视屏，允许的视屏时长为20秒\n        _imagePickerVC.videoMaximumDuration = 20;\n        // 允许的视屏质量（如果质量选取的质量过高，会自动降低质量）\n        _imagePickerVC.videoQuality = UIImagePickerControllerQualityTypeHigh;\n        _imagePickerVC.mediaTypes = @[(NSString *)kUTTypeMovie, (NSString *)kUTTypeImage];\n        // 设置代理，遵守UINavigationControllerDelegate, UIImagePickerControllerDelegate 协议\n        _imagePickerVC.delegate = self;\n        // 是否允许编辑（YES：图片选择完成进入编辑模式）\n//        _imagePickerVC.allowsEditing = YES;\n        \n    }\n    return _imagePickerVC;\n}\n\n\n-(CLLocationManager *)locationManager {\n    if (!_locationManager) {\n        _locationManager = [[CLLocationManager alloc] init];\n        _locationManager.delegate = self;\n        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;\n        _locationManager.distanceFilter = 1000.0f;\n    }\n    return _locationManager;\n}\n```\n\n\n###拍照相关代码\n\n```\n\n\n-(void)getLocation\n{\n    //判断定位功能是否打开\n    if ([CLLocationManager locationServicesEnabled]) {\n        self.locationManager = [[CLLocationManager alloc]init];\n        self.locationManager.delegate = self;\n        [self.locationManager requestAlwaysAuthorization];\n        \n        [self.locationManager requestWhenInUseAuthorization];\n        \n        //设置寻址精度\n        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;\n        self.locationManager.distanceFilter = 5.0;\n        [self.locationManager startUpdatingLocation];\n    }\n}\n\n//定位失败后调用此代理方法\n-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error\n{}\n\n//获取一次定位，然后关掉manager\n-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations\n{\n    //防止多次调用\n    \n    CLLocation *currentLocation = [locations lastObject];\n    \n    NSTimeInterval locationAge = -[currentLocation.timestamp timeIntervalSinceNow];\n    \n    if (locationAge > 5.0) return;\n    \n    if (currentLocation.horizontalAccuracy < 0) return;\n    \n    //当前经纬度\n    self.jingdu.text = [NSString stringWithFormat:@\"%f\", currentLocation.coordinate.longitude];\n    self.weidu.text = [NSString stringWithFormat:@\"%f\", currentLocation.coordinate.latitude];\n    \n    CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];\n    \n    CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:currentLocation.coordinate.latitude longitude:currentLocation.coordinate.longitude];\n    \n    __weak typeof(self)weakSelf = self;\n    \n    //反向地理编码的请求 -> 根据经纬度 获取 位置\n    [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) {\n        \n        for (CLPlacemark *placeMark in placemarks)\n        {\n            NSDictionary *addressDic=placeMark.addressDictionary;\n            \n            NSArray *location_Arr = [addressDic objectForKey:@\"FormattedAddressLines\"];//系统格式化后的位置\n            \n            weakSelf.location.text = [location_Arr firstObject];\n        }\n    }];\n    \n    [self.locationManager stopUpdatingLocation];\n\n}\n\n\n```\n\n###相册相关代码\n\n```\n\n{//相册\n        \n        NSURL *assetURL = [info objectForKey:UIImagePickerControllerReferenceURL];\n        \n        ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];\n        \n        __block NSMutableDictionary *imageMetadata_GPS = nil;\n        \n        __weak typeof(self)weakSelf = self;\n        \n        [library assetForURL:assetURL resultBlock:^(ALAsset *asset) {\n            \n             //获取时间\n             NSDate* pictureDate = [asset valueForProperty:ALAssetPropertyDate];\n             NSDateFormatter * formatter = [[NSDateFormatter alloc]init];\n             formatter.dateFormat = @\"yyyy:MM:dd HH:mm:ss\";\n             formatter.timeZone = [NSTimeZone localTimeZone];\n             NSString * pictureTime = [formatter stringFromDate:pictureDate];\n             weakSelf.time.text = pictureTime;\n             \n             //获取GPS\n             imageMetadata_GPS = [[NSMutableDictionary alloc] initWithDictionary:asset.defaultRepresentation.metadata];\n             \n             NSDictionary *GPSDict=[imageMetadata_GPS objectForKey:(NSString*)kCGImagePropertyGPSDictionary];\n             \n             if (GPSDict!=nil) {\n                 \n                 CLLocation *loc=[GPSDict locationFromGPSDictionary];\n                 \n                 weakSelf.weidu.text = [NSString stringWithFormat:@\"%f\", loc.coordinate.latitude];\n                 weakSelf.jingdu.text = [NSString stringWithFormat:@\"%f\", loc.coordinate.longitude];\n                 \n                 CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];\n                 \n                 CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:loc.coordinate.latitude longitude:loc.coordinate.longitude];\n                 \n                 //反向地理编码的请求 -> 根据经纬度 获取 位置\n                 [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) {\n                     for (CLPlacemark *placeMark in placemarks)\n                     {\n                         NSDictionary *addressDic=placeMark.addressDictionary;\n                         \n                         NSArray *location_Arr = [addressDic objectForKey:@\"FormattedAddressLines\"];//系统格式化后的位置\n                         \n                         weakSelf.location.text = [location_Arr firstObject];\n                         \n                     }\n                 }];\n\n             }else{\n                     weakSelf.weidu.text = @\"此照片没有GPS信息\";\n                     weakSelf.jingdu.text = @\"此照片没有GPS信息\";\n                     weakSelf.location.text = @\"此照片没有拍摄位置\";\n                 }\n                 \n             }\n     \n            failureBlock:^(NSError *error) {\n        }];\n    }\n```\n\n###demo地址\n[https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime  ](https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime)","source":"_posts/根据图片获取拍摄地点和拍摄时间.md","raw":"---\ntitle: 根据图片获取拍摄地点和拍摄时间\ndate: 2017-11-15 23:02:25\ntags:\n---\n\n![效果图.gif](http://upload-images.jianshu.io/upload_images/1505288-78d9b8f676a4ac7e.gif?imageMogr2/auto-orient/strip)\n\n参考\n[iOS 获得图片的时间（通过拍照和取出）](http://blog.csdn.net/li1990101010/article/details/50462331)\n[如何获取iPhone拍摄的png照片的拍摄时间,位置信息等图片属性?  ](http://www.cocoachina.com/bbs/read.php?tid=103913png)\n\n###简单理念\n>1. 拍照获取\n拍照即可通过CoreLocation获取当前位置和当前时间。\n>2. 相册获取\n相册即可通过ALAssetsLibrary来获取拍摄时间和拍摄地点。\n\n本软件是通过imagePicker的代理回调中获取info，并从info中获取大量有关的信息，部分图片没有是因为拍照时没有录入信息，存在无网络和关闭权限功能。\n\n-----\n\n###引入头文件\n\n```\n#import <MobileCoreServices/MobileCoreServices.h>\n\n#import <ImageIO/CGImageProperties.h>\n\n#import <AssetsLibrary/AssetsLibrary.h>\n\n#import <CoreLocation/CoreLocation.h>\n\n#import \"NSDictionary+CLLocation.h\"\n```\n\n###定义属性\n\n```\n@property (nonatomic, strong) UIImagePickerController *imagePickerVC;\n\n@property (nonatomic, strong) CLLocationManager *locationmanager;//拍照定位\n\n@property (weak, nonatomic) IBOutlet UIImageView *imageView;\n@property (weak, nonatomic) IBOutlet UILabel *time;\n@property (weak, nonatomic) IBOutlet UILabel *jingdu;\n@property (weak, nonatomic) IBOutlet UILabel *weidu;\n@property (weak, nonatomic) IBOutlet UILabel *location;\n\n@property (nonatomic, copy) NSString *locationFormat;\n```\n\n\n###懒加载\n\n```\n#pragma mark 懒加载\n- (UIImagePickerController *)imagePickerVC {\n    if (!_imagePickerVC) {\n        _imagePickerVC = [[UIImagePickerController alloc] init];\n        // 设置资源来源（相册、相机、图库之一）\n        //        imagePickerVC.sourceType = UIImagePickerControllerSourceTypeCamera;\n        // 设置可用的媒体类型、默认只包含kUTTypeImage，如果想选择视频，请添加kUTTypeMovie\n        // 如果选择的是视屏，允许的视屏时长为20秒\n        _imagePickerVC.videoMaximumDuration = 20;\n        // 允许的视屏质量（如果质量选取的质量过高，会自动降低质量）\n        _imagePickerVC.videoQuality = UIImagePickerControllerQualityTypeHigh;\n        _imagePickerVC.mediaTypes = @[(NSString *)kUTTypeMovie, (NSString *)kUTTypeImage];\n        // 设置代理，遵守UINavigationControllerDelegate, UIImagePickerControllerDelegate 协议\n        _imagePickerVC.delegate = self;\n        // 是否允许编辑（YES：图片选择完成进入编辑模式）\n//        _imagePickerVC.allowsEditing = YES;\n        \n    }\n    return _imagePickerVC;\n}\n\n\n-(CLLocationManager *)locationManager {\n    if (!_locationManager) {\n        _locationManager = [[CLLocationManager alloc] init];\n        _locationManager.delegate = self;\n        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;\n        _locationManager.distanceFilter = 1000.0f;\n    }\n    return _locationManager;\n}\n```\n\n\n###拍照相关代码\n\n```\n\n\n-(void)getLocation\n{\n    //判断定位功能是否打开\n    if ([CLLocationManager locationServicesEnabled]) {\n        self.locationManager = [[CLLocationManager alloc]init];\n        self.locationManager.delegate = self;\n        [self.locationManager requestAlwaysAuthorization];\n        \n        [self.locationManager requestWhenInUseAuthorization];\n        \n        //设置寻址精度\n        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;\n        self.locationManager.distanceFilter = 5.0;\n        [self.locationManager startUpdatingLocation];\n    }\n}\n\n//定位失败后调用此代理方法\n-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error\n{}\n\n//获取一次定位，然后关掉manager\n-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations\n{\n    //防止多次调用\n    \n    CLLocation *currentLocation = [locations lastObject];\n    \n    NSTimeInterval locationAge = -[currentLocation.timestamp timeIntervalSinceNow];\n    \n    if (locationAge > 5.0) return;\n    \n    if (currentLocation.horizontalAccuracy < 0) return;\n    \n    //当前经纬度\n    self.jingdu.text = [NSString stringWithFormat:@\"%f\", currentLocation.coordinate.longitude];\n    self.weidu.text = [NSString stringWithFormat:@\"%f\", currentLocation.coordinate.latitude];\n    \n    CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];\n    \n    CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:currentLocation.coordinate.latitude longitude:currentLocation.coordinate.longitude];\n    \n    __weak typeof(self)weakSelf = self;\n    \n    //反向地理编码的请求 -> 根据经纬度 获取 位置\n    [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) {\n        \n        for (CLPlacemark *placeMark in placemarks)\n        {\n            NSDictionary *addressDic=placeMark.addressDictionary;\n            \n            NSArray *location_Arr = [addressDic objectForKey:@\"FormattedAddressLines\"];//系统格式化后的位置\n            \n            weakSelf.location.text = [location_Arr firstObject];\n        }\n    }];\n    \n    [self.locationManager stopUpdatingLocation];\n\n}\n\n\n```\n\n###相册相关代码\n\n```\n\n{//相册\n        \n        NSURL *assetURL = [info objectForKey:UIImagePickerControllerReferenceURL];\n        \n        ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];\n        \n        __block NSMutableDictionary *imageMetadata_GPS = nil;\n        \n        __weak typeof(self)weakSelf = self;\n        \n        [library assetForURL:assetURL resultBlock:^(ALAsset *asset) {\n            \n             //获取时间\n             NSDate* pictureDate = [asset valueForProperty:ALAssetPropertyDate];\n             NSDateFormatter * formatter = [[NSDateFormatter alloc]init];\n             formatter.dateFormat = @\"yyyy:MM:dd HH:mm:ss\";\n             formatter.timeZone = [NSTimeZone localTimeZone];\n             NSString * pictureTime = [formatter stringFromDate:pictureDate];\n             weakSelf.time.text = pictureTime;\n             \n             //获取GPS\n             imageMetadata_GPS = [[NSMutableDictionary alloc] initWithDictionary:asset.defaultRepresentation.metadata];\n             \n             NSDictionary *GPSDict=[imageMetadata_GPS objectForKey:(NSString*)kCGImagePropertyGPSDictionary];\n             \n             if (GPSDict!=nil) {\n                 \n                 CLLocation *loc=[GPSDict locationFromGPSDictionary];\n                 \n                 weakSelf.weidu.text = [NSString stringWithFormat:@\"%f\", loc.coordinate.latitude];\n                 weakSelf.jingdu.text = [NSString stringWithFormat:@\"%f\", loc.coordinate.longitude];\n                 \n                 CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];\n                 \n                 CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:loc.coordinate.latitude longitude:loc.coordinate.longitude];\n                 \n                 //反向地理编码的请求 -> 根据经纬度 获取 位置\n                 [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) {\n                     for (CLPlacemark *placeMark in placemarks)\n                     {\n                         NSDictionary *addressDic=placeMark.addressDictionary;\n                         \n                         NSArray *location_Arr = [addressDic objectForKey:@\"FormattedAddressLines\"];//系统格式化后的位置\n                         \n                         weakSelf.location.text = [location_Arr firstObject];\n                         \n                     }\n                 }];\n\n             }else{\n                     weakSelf.weidu.text = @\"此照片没有GPS信息\";\n                     weakSelf.jingdu.text = @\"此照片没有GPS信息\";\n                     weakSelf.location.text = @\"此照片没有拍摄位置\";\n                 }\n                 \n             }\n     \n            failureBlock:^(NSError *error) {\n        }];\n    }\n```\n\n###demo地址\n[https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime  ](https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime)","slug":"根据图片获取拍摄地点和拍摄时间","published":1,"updated":"2017-11-15T15:02:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja1vphkn0004p9fyl28vyap8","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-78d9b8f676a4ac7e.gif?imageMogr2/auto-orient/strip\" alt=\"效果图.gif\"></p>\n<p>参考<br><a href=\"http://blog.csdn.net/li1990101010/article/details/50462331\" target=\"_blank\" rel=\"noopener\">iOS 获得图片的时间（通过拍照和取出）</a><br><a href=\"http://www.cocoachina.com/bbs/read.php?tid=103913png\" target=\"_blank\" rel=\"noopener\">如何获取iPhone拍摄的png照片的拍摄时间,位置信息等图片属性?  </a></p>\n<p>###简单理念</p>\n<blockquote>\n<ol>\n<li>拍照获取<br>拍照即可通过CoreLocation获取当前位置和当前时间。</li>\n<li>相册获取<br>相册即可通过ALAssetsLibrary来获取拍摄时间和拍摄地点。</li>\n</ol>\n</blockquote>\n<p>本软件是通过imagePicker的代理回调中获取info，并从info中获取大量有关的信息，部分图片没有是因为拍照时没有录入信息，存在无网络和关闭权限功能。</p>\n<hr>\n<p>###引入头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;ImageIO/CGImageProperties.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;AssetsLibrary/AssetsLibrary.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;CoreLocation/CoreLocation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;NSDictionary+CLLocation.h&quot;</span><br></pre></td></tr></table></figure>\n<p>###定义属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) UIImagePickerController *imagePickerVC;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) CLLocationManager *locationmanager;//拍照定位</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIImageView *imageView;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *time;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *jingdu;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *weidu;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *location;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, copy) NSString *locationFormat;</span><br></pre></td></tr></table></figure>\n<p>###懒加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark 懒加载</span><br><span class=\"line\">- (UIImagePickerController *)imagePickerVC &#123;</span><br><span class=\"line\">    if (!_imagePickerVC) &#123;</span><br><span class=\"line\">        _imagePickerVC = [[UIImagePickerController alloc] init];</span><br><span class=\"line\">        // 设置资源来源（相册、相机、图库之一）</span><br><span class=\"line\">        //        imagePickerVC.sourceType = UIImagePickerControllerSourceTypeCamera;</span><br><span class=\"line\">        // 设置可用的媒体类型、默认只包含kUTTypeImage，如果想选择视频，请添加kUTTypeMovie</span><br><span class=\"line\">        // 如果选择的是视屏，允许的视屏时长为20秒</span><br><span class=\"line\">        _imagePickerVC.videoMaximumDuration = 20;</span><br><span class=\"line\">        // 允许的视屏质量（如果质量选取的质量过高，会自动降低质量）</span><br><span class=\"line\">        _imagePickerVC.videoQuality = UIImagePickerControllerQualityTypeHigh;</span><br><span class=\"line\">        _imagePickerVC.mediaTypes = @[(NSString *)kUTTypeMovie, (NSString *)kUTTypeImage];</span><br><span class=\"line\">        // 设置代理，遵守UINavigationControllerDelegate, UIImagePickerControllerDelegate 协议</span><br><span class=\"line\">        _imagePickerVC.delegate = self;</span><br><span class=\"line\">        // 是否允许编辑（YES：图片选择完成进入编辑模式）</span><br><span class=\"line\">//        _imagePickerVC.allowsEditing = YES;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _imagePickerVC;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(CLLocationManager *)locationManager &#123;</span><br><span class=\"line\">    if (!_locationManager) &#123;</span><br><span class=\"line\">        _locationManager = [[CLLocationManager alloc] init];</span><br><span class=\"line\">        _locationManager.delegate = self;</span><br><span class=\"line\">        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;</span><br><span class=\"line\">        _locationManager.distanceFilter = 1000.0f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _locationManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###拍照相关代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)getLocation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //判断定位功能是否打开</span><br><span class=\"line\">    if ([CLLocationManager locationServicesEnabled]) &#123;</span><br><span class=\"line\">        self.locationManager = [[CLLocationManager alloc]init];</span><br><span class=\"line\">        self.locationManager.delegate = self;</span><br><span class=\"line\">        [self.locationManager requestAlwaysAuthorization];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [self.locationManager requestWhenInUseAuthorization];</span><br><span class=\"line\">        </span><br><span class=\"line\">        //设置寻址精度</span><br><span class=\"line\">        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;</span><br><span class=\"line\">        self.locationManager.distanceFilter = 5.0;</span><br><span class=\"line\">        [self.locationManager startUpdatingLocation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//定位失败后调用此代理方法</span><br><span class=\"line\">-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取一次定位，然后关掉manager</span><br><span class=\"line\">-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray&lt;CLLocation *&gt; *)locations</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //防止多次调用</span><br><span class=\"line\">    </span><br><span class=\"line\">    CLLocation *currentLocation = [locations lastObject];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSTimeInterval locationAge = -[currentLocation.timestamp timeIntervalSinceNow];</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (locationAge &gt; 5.0) return;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (currentLocation.horizontalAccuracy &lt; 0) return;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //当前经纬度</span><br><span class=\"line\">    self.jingdu.text = [NSString stringWithFormat:@&quot;%f&quot;, currentLocation.coordinate.longitude];</span><br><span class=\"line\">    self.weidu.text = [NSString stringWithFormat:@&quot;%f&quot;, currentLocation.coordinate.latitude];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:currentLocation.coordinate.latitude longitude:currentLocation.coordinate.longitude];</span><br><span class=\"line\">    </span><br><span class=\"line\">    __weak typeof(self)weakSelf = self;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //反向地理编码的请求 -&gt; 根据经纬度 获取 位置</span><br><span class=\"line\">    [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        for (CLPlacemark *placeMark in placemarks)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            NSDictionary *addressDic=placeMark.addressDictionary;</span><br><span class=\"line\">            </span><br><span class=\"line\">            NSArray *location_Arr = [addressDic objectForKey:@&quot;FormattedAddressLines&quot;];//系统格式化后的位置</span><br><span class=\"line\">            </span><br><span class=\"line\">            weakSelf.location.text = [location_Arr firstObject];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.locationManager stopUpdatingLocation];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###相册相关代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;//相册</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSURL *assetURL = [info objectForKey:UIImagePickerControllerReferenceURL];</span><br><span class=\"line\">        </span><br><span class=\"line\">        ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        __block NSMutableDictionary *imageMetadata_GPS = nil;</span><br><span class=\"line\">        </span><br><span class=\"line\">        __weak typeof(self)weakSelf = self;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [library assetForURL:assetURL resultBlock:^(ALAsset *asset) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">             //获取时间</span><br><span class=\"line\">             NSDate* pictureDate = [asset valueForProperty:ALAssetPropertyDate];</span><br><span class=\"line\">             NSDateFormatter * formatter = [[NSDateFormatter alloc]init];</span><br><span class=\"line\">             formatter.dateFormat = @&quot;yyyy:MM:dd HH:mm:ss&quot;;</span><br><span class=\"line\">             formatter.timeZone = [NSTimeZone localTimeZone];</span><br><span class=\"line\">             NSString * pictureTime = [formatter stringFromDate:pictureDate];</span><br><span class=\"line\">             weakSelf.time.text = pictureTime;</span><br><span class=\"line\">             </span><br><span class=\"line\">             //获取GPS</span><br><span class=\"line\">             imageMetadata_GPS = [[NSMutableDictionary alloc] initWithDictionary:asset.defaultRepresentation.metadata];</span><br><span class=\"line\">             </span><br><span class=\"line\">             NSDictionary *GPSDict=[imageMetadata_GPS objectForKey:(NSString*)kCGImagePropertyGPSDictionary];</span><br><span class=\"line\">             </span><br><span class=\"line\">             if (GPSDict!=nil) &#123;</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 CLLocation *loc=[GPSDict locationFromGPSDictionary];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 weakSelf.weidu.text = [NSString stringWithFormat:@&quot;%f&quot;, loc.coordinate.latitude];</span><br><span class=\"line\">                 weakSelf.jingdu.text = [NSString stringWithFormat:@&quot;%f&quot;, loc.coordinate.longitude];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:loc.coordinate.latitude longitude:loc.coordinate.longitude];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 //反向地理编码的请求 -&gt; 根据经纬度 获取 位置</span><br><span class=\"line\">                 [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) &#123;</span><br><span class=\"line\">                     for (CLPlacemark *placeMark in placemarks)</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                         NSDictionary *addressDic=placeMark.addressDictionary;</span><br><span class=\"line\">                         </span><br><span class=\"line\">                         NSArray *location_Arr = [addressDic objectForKey:@&quot;FormattedAddressLines&quot;];//系统格式化后的位置</span><br><span class=\"line\">                         </span><br><span class=\"line\">                         weakSelf.location.text = [location_Arr firstObject];</span><br><span class=\"line\">                         </span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;else&#123;</span><br><span class=\"line\">                     weakSelf.weidu.text = @&quot;此照片没有GPS信息&quot;;</span><br><span class=\"line\">                     weakSelf.jingdu.text = @&quot;此照片没有GPS信息&quot;;</span><br><span class=\"line\">                     weakSelf.location.text = @&quot;此照片没有拍摄位置&quot;;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 </span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">            failureBlock:^(NSError *error) &#123;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>###demo地址<br><a href=\"https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime\" target=\"_blank\" rel=\"noopener\">https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime  </a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1505288-78d9b8f676a4ac7e.gif?imageMogr2/auto-orient/strip\" alt=\"效果图.gif\"></p>\n<p>参考<br><a href=\"http://blog.csdn.net/li1990101010/article/details/50462331\" target=\"_blank\" rel=\"noopener\">iOS 获得图片的时间（通过拍照和取出）</a><br><a href=\"http://www.cocoachina.com/bbs/read.php?tid=103913png\" target=\"_blank\" rel=\"noopener\">如何获取iPhone拍摄的png照片的拍摄时间,位置信息等图片属性?  </a></p>\n<p>###简单理念</p>\n<blockquote>\n<ol>\n<li>拍照获取<br>拍照即可通过CoreLocation获取当前位置和当前时间。</li>\n<li>相册获取<br>相册即可通过ALAssetsLibrary来获取拍摄时间和拍摄地点。</li>\n</ol>\n</blockquote>\n<p>本软件是通过imagePicker的代理回调中获取info，并从info中获取大量有关的信息，部分图片没有是因为拍照时没有录入信息，存在无网络和关闭权限功能。</p>\n<hr>\n<p>###引入头文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;ImageIO/CGImageProperties.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;AssetsLibrary/AssetsLibrary.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;CoreLocation/CoreLocation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;NSDictionary+CLLocation.h&quot;</span><br></pre></td></tr></table></figure>\n<p>###定义属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong) UIImagePickerController *imagePickerVC;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, strong) CLLocationManager *locationmanager;//拍照定位</span><br><span class=\"line\"></span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UIImageView *imageView;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *time;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *jingdu;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *weidu;</span><br><span class=\"line\">@property (weak, nonatomic) IBOutlet UILabel *location;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, copy) NSString *locationFormat;</span><br></pre></td></tr></table></figure>\n<p>###懒加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark 懒加载</span><br><span class=\"line\">- (UIImagePickerController *)imagePickerVC &#123;</span><br><span class=\"line\">    if (!_imagePickerVC) &#123;</span><br><span class=\"line\">        _imagePickerVC = [[UIImagePickerController alloc] init];</span><br><span class=\"line\">        // 设置资源来源（相册、相机、图库之一）</span><br><span class=\"line\">        //        imagePickerVC.sourceType = UIImagePickerControllerSourceTypeCamera;</span><br><span class=\"line\">        // 设置可用的媒体类型、默认只包含kUTTypeImage，如果想选择视频，请添加kUTTypeMovie</span><br><span class=\"line\">        // 如果选择的是视屏，允许的视屏时长为20秒</span><br><span class=\"line\">        _imagePickerVC.videoMaximumDuration = 20;</span><br><span class=\"line\">        // 允许的视屏质量（如果质量选取的质量过高，会自动降低质量）</span><br><span class=\"line\">        _imagePickerVC.videoQuality = UIImagePickerControllerQualityTypeHigh;</span><br><span class=\"line\">        _imagePickerVC.mediaTypes = @[(NSString *)kUTTypeMovie, (NSString *)kUTTypeImage];</span><br><span class=\"line\">        // 设置代理，遵守UINavigationControllerDelegate, UIImagePickerControllerDelegate 协议</span><br><span class=\"line\">        _imagePickerVC.delegate = self;</span><br><span class=\"line\">        // 是否允许编辑（YES：图片选择完成进入编辑模式）</span><br><span class=\"line\">//        _imagePickerVC.allowsEditing = YES;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _imagePickerVC;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(CLLocationManager *)locationManager &#123;</span><br><span class=\"line\">    if (!_locationManager) &#123;</span><br><span class=\"line\">        _locationManager = [[CLLocationManager alloc] init];</span><br><span class=\"line\">        _locationManager.delegate = self;</span><br><span class=\"line\">        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;</span><br><span class=\"line\">        _locationManager.distanceFilter = 1000.0f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _locationManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###拍照相关代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(void)getLocation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //判断定位功能是否打开</span><br><span class=\"line\">    if ([CLLocationManager locationServicesEnabled]) &#123;</span><br><span class=\"line\">        self.locationManager = [[CLLocationManager alloc]init];</span><br><span class=\"line\">        self.locationManager.delegate = self;</span><br><span class=\"line\">        [self.locationManager requestAlwaysAuthorization];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [self.locationManager requestWhenInUseAuthorization];</span><br><span class=\"line\">        </span><br><span class=\"line\">        //设置寻址精度</span><br><span class=\"line\">        self.locationManager.desiredAccuracy = kCLLocationAccuracyBest;</span><br><span class=\"line\">        self.locationManager.distanceFilter = 5.0;</span><br><span class=\"line\">        [self.locationManager startUpdatingLocation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//定位失败后调用此代理方法</span><br><span class=\"line\">-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取一次定位，然后关掉manager</span><br><span class=\"line\">-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray&lt;CLLocation *&gt; *)locations</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //防止多次调用</span><br><span class=\"line\">    </span><br><span class=\"line\">    CLLocation *currentLocation = [locations lastObject];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSTimeInterval locationAge = -[currentLocation.timestamp timeIntervalSinceNow];</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (locationAge &gt; 5.0) return;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (currentLocation.horizontalAccuracy &lt; 0) return;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //当前经纬度</span><br><span class=\"line\">    self.jingdu.text = [NSString stringWithFormat:@&quot;%f&quot;, currentLocation.coordinate.longitude];</span><br><span class=\"line\">    self.weidu.text = [NSString stringWithFormat:@&quot;%f&quot;, currentLocation.coordinate.latitude];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:currentLocation.coordinate.latitude longitude:currentLocation.coordinate.longitude];</span><br><span class=\"line\">    </span><br><span class=\"line\">    __weak typeof(self)weakSelf = self;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //反向地理编码的请求 -&gt; 根据经纬度 获取 位置</span><br><span class=\"line\">    [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        for (CLPlacemark *placeMark in placemarks)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            NSDictionary *addressDic=placeMark.addressDictionary;</span><br><span class=\"line\">            </span><br><span class=\"line\">            NSArray *location_Arr = [addressDic objectForKey:@&quot;FormattedAddressLines&quot;];//系统格式化后的位置</span><br><span class=\"line\">            </span><br><span class=\"line\">            weakSelf.location.text = [location_Arr firstObject];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.locationManager stopUpdatingLocation];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###相册相关代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;//相册</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSURL *assetURL = [info objectForKey:UIImagePickerControllerReferenceURL];</span><br><span class=\"line\">        </span><br><span class=\"line\">        ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        __block NSMutableDictionary *imageMetadata_GPS = nil;</span><br><span class=\"line\">        </span><br><span class=\"line\">        __weak typeof(self)weakSelf = self;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [library assetForURL:assetURL resultBlock:^(ALAsset *asset) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">             //获取时间</span><br><span class=\"line\">             NSDate* pictureDate = [asset valueForProperty:ALAssetPropertyDate];</span><br><span class=\"line\">             NSDateFormatter * formatter = [[NSDateFormatter alloc]init];</span><br><span class=\"line\">             formatter.dateFormat = @&quot;yyyy:MM:dd HH:mm:ss&quot;;</span><br><span class=\"line\">             formatter.timeZone = [NSTimeZone localTimeZone];</span><br><span class=\"line\">             NSString * pictureTime = [formatter stringFromDate:pictureDate];</span><br><span class=\"line\">             weakSelf.time.text = pictureTime;</span><br><span class=\"line\">             </span><br><span class=\"line\">             //获取GPS</span><br><span class=\"line\">             imageMetadata_GPS = [[NSMutableDictionary alloc] initWithDictionary:asset.defaultRepresentation.metadata];</span><br><span class=\"line\">             </span><br><span class=\"line\">             NSDictionary *GPSDict=[imageMetadata_GPS objectForKey:(NSString*)kCGImagePropertyGPSDictionary];</span><br><span class=\"line\">             </span><br><span class=\"line\">             if (GPSDict!=nil) &#123;</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 CLLocation *loc=[GPSDict locationFromGPSDictionary];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 weakSelf.weidu.text = [NSString stringWithFormat:@&quot;%f&quot;, loc.coordinate.latitude];</span><br><span class=\"line\">                 weakSelf.jingdu.text = [NSString stringWithFormat:@&quot;%f&quot;, loc.coordinate.longitude];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 CLLocation *newLocation = [[CLLocation alloc] initWithLatitude:loc.coordinate.latitude longitude:loc.coordinate.longitude];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 //反向地理编码的请求 -&gt; 根据经纬度 获取 位置</span><br><span class=\"line\">                 [clGeoCoder reverseGeocodeLocation:newLocation completionHandler: ^(NSArray *placemarks,NSError *error) &#123;</span><br><span class=\"line\">                     for (CLPlacemark *placeMark in placemarks)</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                         NSDictionary *addressDic=placeMark.addressDictionary;</span><br><span class=\"line\">                         </span><br><span class=\"line\">                         NSArray *location_Arr = [addressDic objectForKey:@&quot;FormattedAddressLines&quot;];//系统格式化后的位置</span><br><span class=\"line\">                         </span><br><span class=\"line\">                         weakSelf.location.text = [location_Arr firstObject];</span><br><span class=\"line\">                         </span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;else&#123;</span><br><span class=\"line\">                     weakSelf.weidu.text = @&quot;此照片没有GPS信息&quot;;</span><br><span class=\"line\">                     weakSelf.jingdu.text = @&quot;此照片没有GPS信息&quot;;</span><br><span class=\"line\">                     weakSelf.location.text = @&quot;此照片没有拍摄位置&quot;;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 </span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">            failureBlock:^(NSError *error) &#123;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>###demo地址<br><a href=\"https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime\" target=\"_blank\" rel=\"noopener\">https://github.com/pengshengsongcode/ThroughPicGetShootPlaceWithTime  </a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}